version: '3'
services:

  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    environment:
      - "POSTGRES_DB=mastodon_dev"
      - "POSTGRES_USER=mastodon"
      - "POSTGRES_PASSWORD=TsLXJPYaN7N06YQAHkNj"
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    networks:
      - test
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - ./postgres14:/var/lib/postgresql/data

  redis:
    restart: always
    image: redis:6-alpine
    networks:
      - test
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - ./redis:/data

  # es:
  #   restart: always
  #   image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - "cluster.name=es-mastodon"
  #     - "discovery.type=single-node"
  #     - "bootstrap.memory_lock=true"
  #   networks:
  #     - internal_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
  #   volumes:
  #     - ./elasticsearch:/usr/share/elasticsearch/data
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1

  web:
    # docker build -f Dockerfile.dev -t mastodon:dev .
    image: mastodon:dev
    restart: always
    env_file: .env.development
    # -b 0.0.0.0 explicitly because on dev envs it only listens on localhost
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000 -b 0.0.0.0"
    networks:
      - test
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
    ports:
      - 3000:3000
    depends_on:
      - db
      - redis
      # - es
    volumes:
      - ./public/system:/mastodon/public/system
      # volume mount for dev
      - ./:/opt/mastodon

  streaming:
    image: mastodon:dev
    restart: always
    env_file: .env.development
    command: node ./streaming
    networks:
      - test
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    ports:
      - 4000:4000
    depends_on:
      - db
      - redis
    volumes:
      - ./:/opt/mastodon

  sidekiq:
    image: mastodon:dev
    restart: always
    env_file: .env.development
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - test
    volumes:
      - ./public/system:/mastodon/public/system
      - ./:/opt/mastodon
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[s]idekiq\ 6' || false"]

## Uncomment to enable federation with tor instances along with adding the following ENV variables
## http_proxy=http://privoxy:8118
## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#  tor:
#    image: sirboops/tor
#    networks:
#      - external_network
#      - internal_network
#
#  privoxy:
#    image: sirboops/privoxy
#    volumes:
#      - ./priv-config:/opt/config
#    networks:
#      - external_network
#      - internal_network

networks:
        test:
